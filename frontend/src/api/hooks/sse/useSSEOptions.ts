import { useEffect, useRef, useState, useCallback } from "react";

interface UseSSEOptions {
  onMessage?: (event: MessageEvent) => void; // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  onError?: (error: Event) => void; // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  onOpen?: (event: Event) => void; // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  reconnectInterval?: number; // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  maxReconnectInterval?: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  maxRetries?: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
}

interface UseSSEReturn {
  start: () => void; // –°—Ç–∞—Ä—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  stop: () => void; // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  isConnected: boolean; // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
}

export const useSSEOptions = (
  url: string,
  options: UseSSEOptions = {}
): UseSSEReturn => {
  const {
    onMessage,
    onError,
    onOpen,
    reconnectInterval = 1000, // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫)
    maxReconnectInterval = 60000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫)
    maxRetries = 10 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
  } = options;

  const [isConnected, setIsConnected] = useState<boolean>(false);
  const eventSourceRef = useRef<EventSource | null>(null);
  const reconnectTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const retryCountRef = useRef<number>(0);
  const currentReconnectInterval = useRef<number>(reconnectInterval); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —á–∏—Å–ª–æ–º

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SSE
  const start = useCallback(() => {
    if (eventSourceRef.current) return; // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ –≤—ã—Ö–æ–¥–∏–º

    console.log("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE...");

    const eventSource = new EventSource(url);

    eventSource.onopen = (event) => {
      console.log("‚úÖ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–æ");
      setIsConnected(true);
      retryCountRef.current = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
      currentReconnectInterval.current = reconnectInterval; // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
      onOpen && onOpen(event);
    };

    eventSource.onmessage = (event) => {
      onMessage && onMessage(event);
    };

    eventSource.onerror = (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ SSE", error);
      setIsConnected(false);
      onError && onError(error);

      stop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (retryCountRef.current < maxRetries) {
        retryCountRef.current += 1;
        currentReconnectInterval.current = Math.min(
          currentReconnectInterval.current * 2,
          maxReconnectInterval
        );
        console.log(
          `‚è≥ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ #${retryCountRef.current} —á–µ—Ä–µ–∑ ${currentReconnectInterval.current / 1000} —Å–µ–∫...`
        );
        reconnectTimeoutRef.current = setTimeout(start, currentReconnectInterval.current);
      } else {
        console.warn(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ (${maxRetries})`);
      }
    };

    eventSourceRef.current = eventSource;
  }, [url, onOpen, onMessage, onError, reconnectInterval, maxReconnectInterval, maxRetries]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SSE
  const stop = useCallback(() => {
    if (!eventSourceRef.current) return;
    console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SSE...");
    eventSourceRef.current.close();
    eventSourceRef.current = null;
    setIsConnected(false);
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => stop();
  }, [stop]);

  return { start, stop, isConnected };
};
